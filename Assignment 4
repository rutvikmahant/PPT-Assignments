#Que1
## Python function to print common elements in three sorted arrays
def findCommon(ar1, ar2, ar3, n1, n2, n3):
 
    # Initialize starting indexes for ar1[], ar2[] and ar3[]
    i, j, k = 0, 0, 0
 
    # Iterate through three arrays while all arrays have elements
    while (i < n1 and j < n2 and k < n3):
 
        # If x = y and y = z, print any of them and move ahead
        # in all arrays
        if (ar1[i] == ar2[j] and ar2[j] == ar3[k]):
            print ar1[i],
            i += 1
            j += 1
            k += 1
 
        # x < y
        elif ar1[i] < ar2[j]:
            i += 1
 
        # y < z
        elif ar2[j] < ar3[k]:
            j += 1
 
        # We reach here when x > y and z < y, i.e., z is smallest
        else:
            k += 1
 
 
# Driver program to check above function
ar1 = [1, 5, 10, 20, 40, 80]
ar2 = [6, 7, 20, 80, 100]
ar3 = [3, 4, 15, 20, 30, 70, 80, 120]
n1 = len(ar1)
n2 = len(ar2)
n3 = len(ar3)
print "Common elements are",
findCommon(ar1, ar2, ar3, n1, n2, n3)


#Que2
class Solution:
    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:
        set1 = set(nums1)
        set2 = set(nums2)
    
        result1 = list(set1 - set2)
        result2 = list(set2 - set1)

        return [result1, result2]

#Que3
class Solution:
    def transpose(self, matrix: List[List[int]]) -> List[List[int]]:
        n = len(matrix)
        m = len(matrix[0])
        
        # Create a new matrix with dimensions swapped
        # Create a 3x3 matrix
        transposed = [[0]*n for _ in range(m)]

        
        for i in range(n):
            for j in range(m):
                transposed[j][i] = matrix[i][j]
        
        return transposed

#Que4
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        nums.sort()
        sum=0
        for i in range(0,len(nums),2):
            sum+=min(nums[i],nums[i+1])

        return sum

#Que5
class Solution:
    def arrangeCoins(self, n: int) -> int:
        
        complete_rows = 0
        required_coins = 1

        while n >= required_coins:
            complete_rows += 1
            n -= required_coins
            required_coins += 1

        return complete_rows

#Que6
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        new_nums=[]
        for i in range(len(nums)):
            new_nums.append(nums[i]**2)
            new_nums.sort()

        return new_nums

#Que7
class Solution:
    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:
        min_y = m
        min_x = n

        for y, x in ops:
            min_y = min(min_y, y)
            min_x = min(min_x, x)

        return min_x * min_y

#Que8
class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        arr1=[]
        arr2=[]
        arr3=[]
        for i in range(n):
            arr1.append(nums[i])
        for i in range(n,2*n):
            arr2.append(nums[i])
        for i in range(n):
            arr3.append(arr1[i])
            arr3.append(arr2[i])
        return arr3
