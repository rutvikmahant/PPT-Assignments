#Que1
class Solution:
    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:
        matrix=[]
        if m*n != len(original):
            return []
        for i in range(0,m*n,n):
            matrix.append(original[i:i+n])
        return matrix


#Que2
class Solution:
    def arrangeCoins(self, n: int) -> int:
        
        complete_rows = 0
        required_coins = 1

        while n >= required_coins:
            complete_rows += 1
            n -= required_coins
            required_coins += 1

        return complete_rows



#Que3
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        new_nums=[]
        for i in range(len(nums)):
            new_nums.append(nums[i]**2)
            new_nums.sort()

        return new_nums

#Que4
class Solution:
    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:
        set1 = set(nums1)
        set2 = set(nums2)
    
        result1 = list(set1 - set2)
        result2 = list(set2 - set1)

        return [result1, result2]

#Que6
class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        nums.sort()  # Sort the list in ascending order
        ans = []
        for i in range(1, len(nums)):
            if nums[i] == nums[i - 1]:
                ans.append(nums[i])
        return ans

#Que7
class Solution:
    def findMin(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        while left < right:
            mid = left + (right - left) // 2
            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                right = mid
        return nums[left]

#Que8
class Solution:
    def findMin(self, nums: List[int]) -> int:
        left = 0
        right = len(nums) - 1

        while left < right:
            mid = left + (right - left) // 2

            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                right = mid

        return nums[left]

