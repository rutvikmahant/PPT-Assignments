#Que1
class Solution:
    def diStringMatch(self, s: str) -> List[int]:
        L,ic,dc=[],0,len(s)
        for i in s:
            if i=='I':
                L.append(ic)
                ic+=1
            else:
                L.append(dc)
                dc-=1
        if s[-1]=='I':L.append(ic)
        else:L.append(dc)
        return L

#Que2
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        

        m = len(matrix)
        n = len(matrix[0])
        i=0
        j=(m*n)-1
        while i<=j:
            mid = i+(j-i)//2
            row_idx=mid//n
            col_idx=mid%n
            curr_ele=matrix[row_idx][col_idx]
            if curr_ele == target:
                return True
            elif curr_ele<target:
                i = mid+1
            else:
                j = mid-1

        return False

#Que3
class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
            n = len(arr)
            if n < 3:
                return False

            left, right = 0, n - 1

            while left < right:
                if arr[left] < arr[left + 1]:
                    left += 1
                elif arr[right] < arr[right - 1]:
                    right -= 1
                else:
                    return False

            if left == right  and left != 0 and right != n - 1:
                return True
            return False


#Que4
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        count = {0: -1}  # Initial count of 0's and 1's
        max_len = count_diff = 0
        
        for i, num in enumerate(nums):
            count_diff += 1 if num == 1 else -1  # Increment count of 1's or 0's
            if count_diff in count:
                max_len = max(max_len, i - count[count_diff])
            else:
                count[count_diff] = i
        
        return max_len

#Que5
class Solution:
    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:
        nums1.sort()
        nums2.sort()
        n, res = len(nums1), 0
        for i in range(n):
            res += nums1[i] * nums2[n - i - 1]
        return res

#Que6
class Solution:
    def findOriginalArray(self, changed: List[int]) -> List[int]:
        original = []
        n = len(changed)
        for i in range(n):
            if (i + n // 2) % n < n and changed[i] * 2 == changed[(i + n // 2) % n]:
                original.append(changed[i])

        return original

#Que7
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        ans=[[0]*n for _ in range(n)]
        i=0
        start_col,start_row,end_col,end_row=0,0,n,n
        
        while start_col<end_col or start_row<end_row:
            for c in range(start_col,end_col):
                i+=1
                ans[start_row][c]=i

            start_row+=1
            for r in range(start_row,end_row):
                i+=1
                ans[r][end_col-1]=i

            end_col-=1

            for c in range(end_col-1,start_col-1,-1):
                i+=1
                ans[end_row-1][c]=i

            end_row-=1
            for r in range(end_row-1,start_row-1,-1):
                i+=1
                ans[r][start_col]=i

            start_col+=1

        return ans                    

#Que8
class Solution:
    def multiply(self, mat1: List[List[int]], mat2: List[List[int]]) -> List[List[int]]:
        r1, c1, c2 = len(mat1), len(mat1[0]), len(mat2[0])
        res = [[0] * c2 for _ in range(r1)]
        for i in range(r1):
            for j in range(c2):
                for k in range(c1):
                    res[i][j] += mat1[i][k] * mat2[k][j]
        return res
