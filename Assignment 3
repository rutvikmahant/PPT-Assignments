#Que 1
#3 Sum Closest
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        closest_sum=float('inf')
        for i in range(len(nums)-2):
            j=i+1
            k=len(nums)-1
            while j<k:
                curr_sum = nums[i]+nums[j]+nums[k]
                if abs(curr_sum-target)<abs(closest_sum-target):
                    closest_sum = curr_sum
                if curr_sum<target:
                    j+=1
                elif curr_sum>target:
                    k-=1
                else:
                    return curr_sum
        return closest_sum

#Que2
#4 Sum
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        ans = set()
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                k=j+1
                l=len(nums)-1
                while k<l:
                    s=nums[i]+nums[j]+nums[k]+nums[l]
                    if s == target:
                        ans.add((nums[i],nums[j],nums[k],nums[l]))
                        k+=1
                        l-=1
                    elif s<target:
                        k+=1
                    elif s>target:
                        l-=1
        return ans

#Que 3
#Next Permutation
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        l=len(nums)-2
        while l>=0:
            if nums[l]<nums[l+1]:
                s=len(nums)-1
                while s>l:
                    if nums[s]>nums[l]:
                        nums[l],nums[s]=nums[s],nums[l] 
                        arr=(nums[:l+1]+sorted(nums[l+1:]))
                        nums[:]=arr[:]
                        return nums
                    s-=1
            l-=1
        else:
            nums.reverse()
            return nums

#Que4
#Search Insert Position
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left,right=0,len(nums)-1
        while left<=right:
            mid=(left+right)//2
            if nums[mid]==target:
                return mid
            elif nums[mid]<target:
                left=mid+1
            else:
                right=mid-1
        return left

#Que5
#class Solution:
    def plusOne(self, digits):
        strings = ""
        for number in digits:
            strings += str(number)

        temp = str(int(strings) +1)

        return [int(temp[i]) for i in range(len(temp))]

#Que 6
def singleNumber(nums):
    ones = 0
    twos = 0
    
    for num in nums:
        ones = (ones ^ num) & ~twos
        twos = (twos ^ num) & ~ones
    
    return ones

# Test the function
nums = [2, 2, 3, 2]
result = singleNumber(nums)
print(result)


#Que 7
